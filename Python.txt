Basic Level
•	1. What is Python?
	Ans:- Python is an interpreted, object-oriented, high-level programming language. Its high-level built in data structures, combined with dynamic typing and 	dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components 	together. Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Python supports modules and 	packages, which encourages program modularity and code reuse. 

•	2. What is a dynamically typed language?
	Dynamically-typed languages are those (like JavaScript) where the interpreter assigns variables a type at runtime based on the variable's value at the time.

•	3. What is an Interpreted language?
	An interpreted language is a programming language that is generally interpreted, without compiling a program into machine instructions. It is one where the 	instructions are not directly executed by the target machine, but instead, read and executed by some other program. Interpreted language ranges – JavaScript, 	Perl, Python, BASIC, etc.

•	4. What is PEP 8 and why is it important?
	PEP 8, sometimes spelled PEP8 or PEP-8, is a document that provides guidelines and best practices on how to write Python code.

•	5. What is Scope in Python?
	A variable is only available from inside the region it is created. This is called scope.
	A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.
	A variable created in the main body of the Python code is a global variable and belongs to the global scope.

•	6. What are lists and tuples? What is the key difference between the two?
	List and Tuple in Python are the data structures that store and manipulate a collection of elements. Both are used to store the data, and the values stored can 	be accessed using indexes.
	The key difference between tuples and lists is that while tuples are immutable objects, lists are mutable. This means tuples cannot be changed while lists can 	be modified. Tuples are also more memory efficient than the lists.

•	7. What are the common built-in data types in Python?
	Numeric data types: int, float, complex
	String data types: str
	Sequence types: list, tuple, range
	Binary types: bytes, bytearray, memoryview
	Mapping data type: dict
	Boolean type: bool
	Set data types: set, frozenset

•	8. What is pass in Python?
	The pass statement is used as a placeholder for future code. When the pass statement is executed, nothing happens, but you avoid getting an error when empty 	code is not allowed. Empty code is not allowed in loops, function definitions, class definitions, or in if statements.

•	9. What are modules and packages in Python?
	In simple terms, a module is a single file containing Python code, whereas a package is a collection of modules that are organized in a directory hierarchy. 

•	10. What are global, protected and private attributes in Python?
	Global Attributes are defined outside of a class and can be accessed from anywhere in the code, including inside classes. 
	Protected attributes are denoted with a single underscore (_) before the attribute name and are intended to be accessed only within the class and its 	subclasses. We can call that attribute using instance name._attribute name.
	Private attributes are denoted with double underscores (__) before the attribute name and are intended to be accessed only within the class in which they are 	defined. We can call that attribute using instance name._calss name.__attribute name.
	It is important to note that Python's private attributes are not truly private, as they can still be accessed from outside the class by name mangling. However, 	this is discouraged as it goes against the principle of encapsulation, which is a fundamental concept in object-oriented programming.

•	11. What is the use of self in Python?
	The self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python.

•	12. What is __init__?
	It is a special method automatically called when an object is created from a class. This method allows us to initialize an object's attributes and perform any 	necessary setup or initialization tasks.

•	13. What is break, continue and pass in Python?
	In Python, "break", "continue", and "pass"  are control flow statements used within loops and conditional statements. 
	"break" is used to exit a loop prematurely if a certain condition is met. It terminates the loop entirely and continues with the next statement after the loop.
	"continue" is used to skip the rest of the current iteration of a loop and continue with the next iteration. It effectively jumps to the next iteration without 	executing the remaining code in the loop's body. 
	"pass" is used as a placeholder for future code. When the pass statement is executed, nothing happens, but you avoid getting an error when empty 	code is 	not allowed. Empty code is not allowed in loops, function definitions, class definitions, or in if statements.
 
•	14. What are unit tests in Python?
	Unit tests are segments of code written to test other pieces of code, typically a single function or method, that we refer to as a unit. They are a very 	important part of the software development process, as they help to ensure that code works as intended and catch bugs early on.

•	15. What is docstring in Python?
	A Python docstring is a string used to document a Python module, class, function or method, so programmers can understand what it does without having to read 	the details of the implementation. Also, it is a common practice to generate online (html) documentation automatically from docstrings.

•	16. What is slicing in Python?
	Slicing is the extraction of a part of a string, list, or tuple. It enables users to access the specific range of elements by mentioning their indices.

•	17. Explain how can you make a Python Script executable on Unix?
	> Add this line as the first line in the script: #!/usr/bin/env python3.
	> At the unix command prompt, type the following to make myscript.py executable: $ chmod +x myscript.py.
	> Move myscript.py into your bin directory, and it will be runnable from anywhere.

•	18. What is the difference between Python Arrays and lists?
	List cannot manage arithmetic operations. Array can manage arithmetic operations. List consume larger memory and time consuming for easy addition of elements 	while Array comparatively more compact in memory size and faster.

High Level:-
•	1. How is memory managed in Python?
	There are two memory Stack memory and Private heap space. In python the references and name variable are stored in stack memory. The objects are stored in 	private heap space. Which we we can't access directly, it can done by the references.

•	2. What are Python namespaces? Why are they used?
	Python Namespaces are collections of different objects that are associated with unique names whose lifespan depends on the scope of a variable. The scope is a 	region from where we can access a particular object. There are three levels of scopes: built-in (outermost), global, and local. 

•	3. What is Scope Resolution in Python?
		
•	4. What are decorators in Python?
	Decorators are a powerful and elegant feature in Python that allows you to modify or extend the behavior of functions or methods without changing their actual 	code. They are an excellent way to apply reusable functionality across multiple functions, such as timing, caching, logging, or authentication.

•	5. What are Dict and List comprehensions?
	Dict and list comprehensions are concise and readable ways to create dictionaries and lists in Python. They allow you to create new dictionaries or lists by 	specifying the elements you want to include in a compact and expressive manner.

•	6. What is lambda in Python? Why is it used?
	A lambda function is a small anonymous function. A lambda function can take any number of arguments, but can only have one expression.

•	7. How do you copy an object in Python?
	To make a copy of a Python object, we usually use the = (assignment operator).

•	8. What is the difference between xrange and range in Python?
	range() – This returns a range object (a type of iterable). xrange() – This function returns the generator object that can be used to display numbers only by 	looping.

•	9. What is pickling and unpickling?
	“Pickling” is the process whereby a Python object hierarchy is converted into a byte stream, and “unpickling” is the inverse operation, whereby a byte stream 	(from a binary file or bytes-like object) is converted back into an object hierarchy.

•	10. What are generators in Python?
	A generator function in Python is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than 	return. If the body of a def contains yield, the function automatically becomes a Python generator function. 

•	11. What is PYTHONPATH in Python?
	Pythonpath is an environment variable that is used to specify the location of Python libraries. It is typically used by developers to ensure that their code 	can find the required Python libraries when it is run.

•	12. What is the use of help() and dir() functions?
	This dit() built-in function will return the list of names in the current local scope. The dir() function syntax is dir(object). The object can be a function, 	module, string, tuple, dictionary, etc.
	help() function is another Python’s built-in function. Similar to dir(), the help() function also has one optional argument, which means it is not mandatory to 	pass the argument. By using help() function, it is easy to receive assistance in building Python programs.

•	13. What is the difference between .py and .pyc files?
	These files store the source code of the Python programs	These files store the bytecode of the Python programs
	Speed of the .py file is lower while generating output		Speed of the .pyc file is higher than the .py file as it contains the compiled codes.
	.py files store the human-readable high-level python code	.pyc files store the machine-readable low-level intermediate code

•	14. How Python is interpreted?
	An interpreted language is any programing language which is not in machine level code before runtime. interpreters job is to convert the code into machine code 	and to provide that code to os so that os can execute that code. When we write a python program and save it in a .py file that is source code. Now this source 	code requires a compiler and compiler will translate that source code into byte code and this byte code can't understand any os for that we need another 	software that is called python virtual machine. This PVM also called interpretar but in technically the PVM is called just in time compailer, it read our byte 	code and translate that to machine code and provide to the os that the os can understand. Our program is bit slow in interpreter and bit faster in just in time 	compiler.
	
•	15. How are arguments passed by value or by reference in python?
	The concept of pass by value ans pass by reference are often used to describe how arguments are passed to functions or methods in a programing language. Python 	uses a different approach known as pass by object reference which can sometimes be a source of confusion. In pass by value the actual value of an argument is 	passed to a function. This means that the function receives a copy of the original value and any modifications to the parameter with in the function do not 	affect the original value outside the function. In pass by reference a reference to the memory location of the original argument is passed to the function. 	This allows the function to directly access and modify the original value outside the function.
		
•	16. What are iterators in Python?
	An iterator is an object that contains a countable number of values. An iterator is an object that can be iterated upon, meaning that you can traverse through 	all the values. Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and 	__next__() .

•	17. Explain how to delete a file in Python?
	os. remove() will delete a file.

•	18. Explain split() and join() functions in Python?
	split(' ') breaks the string into a list of words, using the space character as the delimiter. The join() function concatenates elements within an iterable, 	such as a list, into a single string. 

•	19. What does *args and **kwargs mean?
	*args specifies the number of non-keyworded arguments that can be passed and the operations that can be performed on the function in Python whereas **kwargs is 	a variable number of keyword arguments that can be passed to a function that can perform dictionary operations.

•	20. What are negative indexes and why are they used?
	Negative indexing is used in Python to manipulate sequence objects such as lists, arrays, strings, etc. Negative indexing retrieves elements from the end by 	providing negative numbers as sequence indexes.

Oops :- 
•	1. How do you create a class in Python?
	To create a class, use the keyword class

•	2. How does inheritance work in python? Explain it with an example.
	Inheritance in Python is implemented by defining a new class, along with the parent class as an argument. class Parent: def greet(self): print('Hello from the 	Parent class! ') class Child(Parent): pass # Creating an instance of Child c = Child() c. greet() # Output: # 'Hello from the Parent class!

•	3. How do you access parent members in the child class?
	This is really simple, you just have to call the constructor of parent class inside the constructor of child class and then the object of a child class can 	access the methods and attributes of the parent class.

•	4. Are access specifiers used in python?
	In Python, access specifiers are like permissions that determine who can interact with specific parts of your code. They act as barriers, controlling whether 	certain code elements are accessible to everyone, a select group, or no one at all.
	
•	5. Is it possible to call parent class without its instance creation?
	Yes but you can only call static methods of base class without creating an instance.

•	6. How is an empty class created in python?
	In Python, to write an empty class pass statement is used. 

•	7. Differentiate between new and override modifiers.
	As you can see, the new method allows the subclass to provide a different implementation of the method that is specific to the subclass. On the other hand, the 	override modifier is used to indicate that a method in a subclass is intended to override a method in the superclass.

•	8. Why is finalize used?
	finalize provides a straight forward way to register a cleanup function to be called when an object is garbage collected. This is simpler to use than setting 	up a callback function on a raw weak reference, since the module automatically ensures that the finalizer remains alive until the object is collected.

•	9. What is init method in python?
	The init method in Python is a fundamental component of object-oriented programming, serving as the constructor that initializes object attributes upon 	instantiation.

•	10. How will you check if a class is a child of another class?
	Python issubclass() is a built-in function used to check if a class is a subclass of another class or not. This function returns True if the given class is the 	subclass of the given class else it returns False.

Pandas :- 
•	1. What do you know about pandas?
	Pandas is a Python library used for working with data sets. It has functions for analyzing, cleaning, exploring, and manipulating data.

•	2. Define pandas dataframe.
	A Pandas DataFrame is a 2 dimensional data structure, like a 2 dimensional array, or a table with rows and columns.

•	3. How will you combine different pandas dataframes?
	pandas provides various methods for combining and comparing Series or DataFrame Merge, join, concatenate

•	4. Can you create a series from the dictionary object in pandas?
	We use series() function of pandas library to convert a dictionary into series by passing the dictionary as an argument

•	5. How will you identify and deal with missing values in a dataframe?
	isnull(). values. any() will work for a DataFrame object to indicate if any value is missing , in some cases it may be useful to also count the number of 	missing values across the entire DataFrame.
	In order to fill null values in a datasets, we use fillna(), replace() and interpolate() function these function replace NaN values with some value of their 	own. All these function help in filling a null values in datasets of a DataFrame. Interpolate() function is basically used to fill NA values in the dataframe 	but it uses various interpolation technique to fill the missing values rather than hard-coding the value.
	
•	6. What do you understand by reindexing in pandas?
	Reindexing in Pandas can be used to change the index of rows and columns of a DataFrame. 

•	7. How to add new column to pandas dataframe?
	dataframe name['column name'] = [operation]

•	8. How will you delete indices, rows and columns from a dataframe?
	Delete rows/columns from DataFrame using Pandas.drop()

•	9. Can you get items of series A that are not available in another series B?
	Sometimes we have two or more series and we have to find all those elements that are present in one series but not in other. We can do this easily, using the 	Bitwise NOT operator along with the pandas.isin() function.

•	10. How will you get the items that are not common to both the given series A and B?
	# import the modules 
	import pandas as pd 
	import numpy as np 
	# create the series 
	ser1 = pd.Series([1, 2, 3, 4, 5]) 
	ser2 = pd.Series([3, 4, 5, 6, 7]) 
	# union of the series 
	union = pd.Series(np.union1d(ser1, ser2)) 
	# intersection of the series 
	intersect = pd.Series(np.intersect1d(ser1, ser2)) 
	# uncommon elements in both the series 
	notcommonseries = union[~union.isin(intersect)] 
	# displaying the result 
	print(notcommonseries) 

•	11. While importing data from different sources, can the pandas library recognize dates?
	You should add parse_dates=True, or parse_dates=['column name'] when reading, thats usually enough to magically parse it. But there are always weird formats 	which need to be defined manually. In such a case you can also add a date parser function, which is the most flexible way possible.
	Suppose you have a column 'datetime' with your string, then:
	from datetime import datetime
	dateparse = lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')
	df = pd.read_csv(infile, parse_dates=['datetime'], date_parser=dateparse)

Numpy :-
•	1. What do you understand by NumPy?
	NumPy (Numerical Python) is an open source Python library that’s used in almost every field of science and engineering. It’s the universal standard for working 	with numerical data in Python, and it’s at the core of the scientific Python and PyData ecosystems.
	The NumPy library contains multidimensional array and matrix data structures. It provides ndarray, a homogeneous n-dimensional array object, with methods to 	efficiently operate on it. NumPy can be used to perform a wide variety of mathematical operations on arrays. 

•	2. How are NumPy arrays advantageous over python lists?
	Advantages of using Numpy Arrays Over Python Lists:
	Consumes less memory, Fast as compared to the python List, Convenient to use.

•	3. What are the steps to create 1D, 2D and 3D arrays?
	import numpy as np
	arr = np.array([1, 2, 3, 4, 5])
	arr = np.array([[1, 2, 3], [4, 5, 6]])
	arr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])

•	4. You are given a numpy array and a new column as inputs. 
	   How will you delete the second column and replace the column with a new column value?
	
•	5. How will you efficiently load data from a text file?
	import numpy as np 
	# Text file data converted to integer data type 
	File_data = np.loadtxt("example1.txt", dtype=int) 
	print(File_data) 

•	6. How will you read CSV data into an array in NumPy?
	from numpy import genfromtxt
	my_data = genfromtxt('my_file.csv', delimiter=',')

•	7. How will you sort the array based on the Nth column?
	import numpy as np
	arr = np.array([[4, 6, 2], [5, 1, 3], [7, 9, 8]])
	# sort by the second column (index 1) in descending order
	sorted_indices = np.argsort(-arr[:,1])
	sorted_arr = arr[sorted_indices]
	print(sorted_arr)

•	8. How will you find the nearest value in a given numpy array?
	import numpy as np
	def find_nearest(array, value):
    		array = np.asarray(array)
		idx = (np.abs(array - value)).argmin()
		return array[idx]
	array = np.random.random(10)
	print(find_nearest(array, value=0.5))

•	9. How will you reverse the numpy array using one line of code?
	the flip() function of NumPy can help you reverse your array with just one line of code, this function simply reverses the order of the elements along a 	specified axis.

•	10. How will you find the shape of any given NumPy array?
	To get the shape of a Python NumPy array use numpy. ndarray. shape property. 

Important Libraries:-
•	1. Differentiate between a package and a module in python.
	In simple terms, a module is a single file containing Python code, whereas a package is a collection of modules that are organized in a directory 	hierarchy.
 
•	2. What are some of the most commonly used built-in modules in Python?
	Python built-in modules include “os”, “sys”, “math”, and “datetime”.
 
•	3. Define PYTHONPATH.
	Pythonpath is a special environment variable that provides guidance to the Python interpreter about where to find various libraries and applications.

•	4. Define PIP.
	PIP is the package manager for Python. In other words, it is a tool that allows us to install the python packages and dependencies(the software 	components required by your code to work without throwing any errors), which are not automatically provided to us by the Python's Standard Library.
 
•	5. Are there any tools for identifying bugs and performing static analysis in python?
	PyChecker is a software development tool used to find programming errors in Python code
 
•	6. Differentiate between deep and shallow copies.
	In Shallow copy, a copy of the original object is stored and only the reference address is finally copied. In Deep copy, the copy of the original object 	and the repetitive copies both are stored.
 
•	7. What is main function in python? How do you invoke it?
	In Python, the role of the main function is to act as the starting point of execution for any software program. The execution of the program starts only 	when the main function is defined in Python because the program executes only when it runs directly, and if it is imported as a module, then it will not run.



1. reverse the string
2. reverse the sentence
3. maximum from the array
4. pallindrome, factorial, prime number
5. sorting an array
6. common element from an array
7. how to join two dataframe
8. find the height of binary tree
9. how to sort a dictionary by value 
10. how find the unique element in list
11. how to delete the last column from a dataframe